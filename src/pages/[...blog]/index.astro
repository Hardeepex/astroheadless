---
import type { InferGetStaticPropsType, GetStaticPaths } from 'astro';

import merge from 'lodash.merge';
import type { ImageMetadata } from 'astro';
import Layout from '~/layouts/PageLayout.astro';
import SinglePost from '~/components/blog/SinglePost.astro';
import ToBlogLink from '~/components/blog/ToBlogLink.astro';

import { getCanonical, getPermalink } from '~/utils/permalinks';
import { getStaticPathsBlogPost, blogPostRobots } from '~/utils/blog';
import { findImage } from '~/utils/images';
<<<<<<< HEAD
import { getLocaleFromUrl } from '~/i18n/translator';
=======
import type { MetaData } from '~/types';
>>>>>>> origin/main

export const prerender = true;

export const getStaticPaths = (async () => {
  return await getStaticPathsBlogPost();
}) satisfies GetStaticPaths;

<<<<<<< HEAD
const { post } = Astro.props;
const localizedPost = post.locales[getLocaleFromUrl(Astro.url)];

const url = getCanonical(getPermalink(localizedPost.permalink, 'post'));
const image = (await findImage(localizedPost.image)) as ImageMetadata | undefined;
=======
type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { post } = Astro.props as Props;

const url = getCanonical(getPermalink(post.permalink, 'post'));
const image = (await findImage(post.image)) as ImageMetadata | string | undefined;
>>>>>>> origin/main

const metadata = merge(
  {
    title: localizedPost.title,
    description: localizedPost.excerpt,
    robots: {
      index: blogPostRobots?.index,
      follow: blogPostRobots?.follow,
    },
    openGraph: {
      type: 'article',
      ...(image ? { images: [{ url: image, width: (image as ImageMetadata)?.width, height: (image as ImageMetadata)?.height }] } : {}),
    },
  },
<<<<<<< HEAD
  { ...(localizedPost?.metadata ? { ...localizedPost.metadata, canonical: post.metadata?.canonical || url } : {}) }
);
=======
  { ...(post?.metadata ? { ...post.metadata, canonical: post.metadata?.canonical || url } : {}) }
) as MetaData;
>>>>>>> origin/main
---

<Layout metadata={metadata}>
  <SinglePost post={{ ...localizedPost, image: image }} url={url} />
  <ToBlogLink />
</Layout>
