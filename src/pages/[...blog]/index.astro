---
import type { InferGetStaticPropsType } from 'astro';

import merge from 'lodash.merge';
import ApiDataFetcher from '~/components/ApiDataFetcher.astro';
import type { ImageMetadata } from 'astro';
import Layout from '~/layouts/PageLayout.astro';
import SinglePost from '~/components/blog/SinglePost.astro';
import ToBlogLink from '~/components/blog/ToBlogLink.astro';

import { getCanonical, getPermalink } from '~/utils/permalinks';
import { getStaticPathsBlogPost, blogPostRobots } from '~/utils/blog';
import { findImage } from '~/utils/images';
import type { MetaData } from '~/types';

export const prerender = true;

import type { PropsFromApiDataFetcher } from '~/types/ApiDataFetcher';

// Replace getStaticPaths logic with Astro's built-in data fetching
export const fetchContent = (async () => {
  // Fetch data at build time using Astro's fetch API
  const blogPostsResponse = await fetch('https://api.example.com/blog/posts');
  const blogPostsData = await blogPostsResponse.json();

  return blogPostsData;
  };

  return paths;
});

type Props = ReturnType<typeof fetchContent>;

const { post } = Astro.props as Props;

const url = getCanonical(getPermalink(post.permalink, 'post'));
const image = (await findImage(post.image)) as ImageMetadata | string | undefined;

const metadata = merge(
  {
    title: post.title,
    description: post.excerpt,
    robots: {
      index: blogPostRobots?.index,
      follow: blogPostRobots?.follow,
    },
    openGraph: {
      type: 'article',
      ...(image ? { images: [{ url: image, width: (image as ImageMetadata)?.width, height: (image as ImageMetadata)?.height }] } : {}),
    },
  },
  { ...(post?.metadata ? { ...post.metadata, canonical: post.metadata?.canonical || url } : {}) }
) as MetaData;
---

<Layout metadata={metadata}>
  <SinglePost post={{ ...post, image: image }} url={url} />
  <ToBlogLink />
</Layout>
